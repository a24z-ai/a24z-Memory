import * as fs from 'node:fs';
import * as path from 'node:path';
import { saveNote, getNotesForPath } from '../src/core-mcp/store/notesStore';
import { GetRepositoryNotesTool } from '../src/core-mcp/tools/GetRepositoryNotesTool';
import { AskA24zMemoryTool } from '../src/core-mcp/tools/AskA24zMemoryTool';

describe('Verify Retrieval Fix', () => {
  const testRepoPath = process.cwd(); // Current repository
  const notesFile = path.join(testRepoPath, '.a24z', 'repository-notes.json');
  
  beforeAll(() => {
    // Ensure we have a clean state
    if (fs.existsSync(notesFile)) {
      console.log('Backing up existing notes file...');
      fs.copyFileSync(notesFile, notesFile + '.backup');
    }
    
    // Save a test note
    console.log('Saving test note in:', testRepoPath);
    const saved = saveNote({
      note: 'Test note for retrieval verification',
      directoryPath: testRepoPath,
      tags: ['test', 'retrieval-fix'],
      anchors: [testRepoPath],
      confidence: 'high',
      type: 'explanation',
      metadata: { test: 'verify-fix' }
    });
    console.log('Saved note ID:', saved.id);
  });
  
  afterAll(() => {
    // Restore backup if it exists
    if (fs.existsSync(notesFile + '.backup')) {
      console.log('Restoring backup...');
      fs.copyFileSync(notesFile + '.backup', notesFile);
      fs.unlinkSync(notesFile + '.backup');
    }
  });

  it('should retrieve notes with direct getNotesForPath', () => {
    console.log('\n=== Direct getNotesForPath ===');
    const notes = getNotesForPath(testRepoPath, true, 50);
    console.log('Found', notes.length, 'notes');
    
    const testNote = notes.find(n => n.note.includes('retrieval verification'));
    expect(testNote).toBeDefined();
    console.log('✅ Direct retrieval works');
  });

  it('should retrieve notes with GetRepositoryNotesTool', async () => {
    console.log('\n=== GetRepositoryNotesTool ===');
    const tool = new GetRepositoryNotesTool();
    
    const result = await tool.execute({
      path: testRepoPath,
      includeParentNotes: true,
      maxResults: 50
    });
    
    const data = JSON.parse(result.content[0].text!);
    console.log('Found', data.totalNotes, 'notes');
    
    const testNote = data.notes.find((n: any) => n.note.includes('retrieval verification'));
    expect(testNote).toBeDefined();
    console.log('✅ GetRepositoryNotesTool works');
  });

  it('should retrieve notes with AskA24zMemoryTool', async () => {
    console.log('\n=== AskA24zMemoryTool ===');
    const tool = new AskA24zMemoryTool();
    
    const result = await tool.execute({
      filePath: testRepoPath,
      query: 'What test notes exist for retrieval verification?',
      taskContext: 'verifying fix'
    });
    
    const response = result.content[0].text!;
    console.log('Response includes test note:', response.includes('retrieval verification'));
    
    expect(response).not.toContain('No relevant knowledge found');
    console.log('✅ AskA24zMemoryTool works');
  });

  it('should have consistent results between all methods', async () => {
    console.log('\n=== Consistency Check ===');
    
    // Direct method
    const directNotes = getNotesForPath(testRepoPath, true, 50);
    const directCount = directNotes.filter(n => n.note.includes('retrieval verification')).length;
    
    // GetRepositoryNotesTool
    const getTool = new GetRepositoryNotesTool();
    const getResult = await getTool.execute({
      path: testRepoPath,
      includeParentNotes: true,
      maxResults: 50
    });
    const getData = JSON.parse(getResult.content[0].text!);
    const getCount = getData.notes.filter((n: any) => n.note.includes('retrieval verification')).length;
    
    // AskA24zMemoryTool
    const askTool = new AskA24zMemoryTool();
    const askResult = await askTool.execute({
      filePath: testRepoPath,
      query: 'What notes exist?',
      taskContext: 'consistency check'
    });
    const hasNote = !askResult.content[0].text!.includes('No relevant knowledge found');
    
    console.log('Direct method found:', directCount);
    console.log('GetRepositoryNotesTool found:', getCount);
    console.log('AskA24zMemoryTool found notes:', hasNote);
    
    // All should find the same notes
    expect(directCount).toBe(getCount);
    expect(directCount > 0).toBe(hasNote);
    
    console.log('✅ All methods are consistent');
  });
});